import seaborn as sns
import pandas as pd
import nfl_data_py as nfl
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.lines import Line2D  # Importing Line2D specifically for the legend

class FantasyData:
    def __init__(self):
        print('Initializing...')
        # requires prerequisite csv file generated by ffc_scraper.py
        df = pd.read_csv(filepath_or_buffer = "2010-23_player_adp_ppr.csv", header = None)
        self.__df = df
        self.__clean_data()

    def __clean_data(self):
        df  = self.__df
        menu = ['number','pick','player','pos','team','overall','std_dev','high','low','times_drafted','year']
        print("Configuring data...")
        df.columns = menu
        df['year'].astype('int')
        df['pos'] = df['pos'].str.strip()
        df['player'] = df['player'].str.strip()
        ## attach nfl stats
        self.__attach_ftsy()
        self.__df = df

    def __attach_ftsy(self):
        print("Configuring fantasy football...")
        df = self.__df
        # import nfl_data_py package dataframe for modern nfl seasons
        players_stats = nfl.import_seasonal_data(years=[2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024])
        players_stats['season'].astype('int')
        players_stats['player_id'].astype('str')
        self.__players_stats = players_stats

        ## map all values in column id to names
        # import df of columns 'id', 'name', 'position'
        mappings = nfl.import_ids()[['name', 'position', 'gsis_id']]
        mappings.set_index('name', inplace=True)
        # use 'name' (now the index) and 'position' as key identifiers. see formatting of dict below
        mappings.index = mappings.index + mappings['position']
        mappings.drop('position', axis=1, inplace=True)
        # for dict transformation eliminate duplicate key-value pairs
        mappings.drop_duplicates(inplace=True)
        # subsets edge case name and position duplicates, keeping the first appearances who 
        # are younger & more likely to be in the nfl
        mappings = mappings[~mappings.index.duplicated(keep="first")]
        # df to dict for mapping
        mappings_dict = mappings['gsis_id'].to_dict()

        # use .map to map flat dictionary, "name+position" -->id
        print("Mapping IDs...")
        df['ids'] = (df['player'].str.strip() + df['pos'].str.strip()).map(mappings_dict)
        df['ids'].astype('str')

        # drop unmapped-id players from df (fantasy defenses, other edgecases)
        df.dropna(subset=['ids'], inplace=True)

        # add a fantasy points column to df
        print(df)
        self.__df = df
        df['fpts'] = self.__df.apply(self.__get_fpts, axis=1)
        print("Adding fantasy data...")
        print(df['fpts'])
        self.__df = df

    def __get_fpts(self, row):
        players_stats = self.__players_stats
        fp = pd.DataFrame()
        fpts = np.nan
        # match id and season
        fp = players_stats[(players_stats['player_id']== row['ids']) & (players_stats['season'] == row['year'])]
        # sorts out potential duplicates (if there are any)
        if len(fp)==1:
            # adjust for lengthened 18-game nfl seasons past 2020 
            if row['year'] in ([2021, 2022, 2023, 2024]):
                fpts = (fp['fantasy_points_ppr'].iloc[0]) *(17/18)
            else:
                fpts = (fp['fantasy_points_ppr'].iloc[0])
            return fpts
        else:
            print("Error: " + row['player'] + "'s " + str(row['year']) + " season has unreadable data")

            # returns NaN
            return fpts
        

    def make_subset(self, position_list, year_list):
        """
        Make a subset for plotting

        Param: desired positions and seasons as list

        Returns: subset as DataFrame
        """
        print("Making a subset...")
        df = self.__df
        df = df[(df['year'].isin(year_list))]
        return df

    def plot_data(self, subset, year_list, position_list, x = 'overall', y='fpts', separate='pos', league_size = 10, flex_spots = 1):
        """
        Plot a dataframe to a polynomial least squares fit of order p = order, separated by
        position groups for research and analysis.  

        Param: a subset DataFrame, position list, optional x and y columns of subset to plot, 
        league size determining startable fantasy assets for avg calculation,
        league's number of flex positions

        Plots: Graph of fantasy points per game in an nfl season by average draft position, by position
        group

        Returns: None
        """
        print("Plotting...")

        # stylization
        plt.figure(figsize=(12, 7))
        plt.style.use('fivethirtyeight')
        plt.rcParams['font.size'] = 10

        # Add horizontal dotted line at y = 0
        plt.axhline(y=0, color='gray', linestyle='--', linewidth=1)

        # Create a Line2D object for "Startable Asset Line" to appear in the legend
        line = Line2D([], [], color='gray', linestyle='dashed', label='Startable Asset Line')

        data = pd.DataFrame()
        # dict for determining # of startable assets,
        # and 1 QB, 2 RB, 2 WR, 1 PK 
        pos_startable_num = {
        "QB": league_size, 
        "WR": int(league_size*2 + (flex_spots*(1/2)*league_size)), 
        "RB": int(league_size*2 + (flex_spots*(1/2)*league_size)), 
        "TE": league_size, 
        "PK": league_size
        }
        # order of polynomial fitting p for every position (RB and WR can be taken to higher order p)
        pos_order = {
        "QB": 3,
        "WR": 3,
        "RB": 3,
        "TE": 3,
        "PK": 3
        }
        for position in position_list:
            data = subset[subset['pos']==position]
            sum_largest = data.nlargest((pos_startable_num.get(position))*len(year_list), 'fpts')['fpts'].sum() #.iloc[(pos_startable_num.get(position))*len(year_list)-1]
            average = ((sum_largest/(pos_startable_num.get(position)*len(year_list))))
            print(position, " average starter's fpts per season = ", average)
            data['fpts'] = (data['fpts']-average)/17
            sns.regplot(x=x, y=y, data=data, order = pos_order.get(position), label=position, scatter_kws={'s': 5})

        plt.title('Drafting Positional Advantage: Positional FPTs per game above \navg. replacement starter per pick, PPR')
        plt.xlim(0, 175)
        plt.ylim(-10, 10)
        plt.xlabel("Average Draft Position (data from 2010-2023, fantasyfootballcalculator.com)")
        plt.ylabel("17-game Adjusted Avg. Fantasy Points Per Game \nabove avg. replacement starter")
        # handles arg puts dotted line in legend
        plt.legend(title="Position", handles=plt.gca().get_legend_handles_labels()[0] + [line])
        plt.show()

# main
# create an instance of the FantasyData class
df = FantasyData()
# settings
position_list = ['WR','RB','TE','QB','PK']
# data from "https://fantasyfootballcalculator.com/adp/ppr/12-team/all/ + year" goes back to 2010
year_list = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]


subset = df.make_subset(position_list=position_list, year_list=year_list)
df.plot_data(subset=subset, position_list=position_list, league_size = 10, flex_spots = 2, year_list=year_list)
